import java.util.*;

/**
 * Generic Node class that contains the Point and a list of places at that
 * location.
 * 
 * @param <T> Point
 * @author Dawon Jeong 80%
 * @author Jacy Yang 20%
 * @author Kevin Williams 0%
 */
public class Node<T> implements Comparable <Node<T>>
{
    private T data;
    private ArrayList<String> places;
    private ArrayList<String> streets;
    private double distance;

    /**
     * Create a node.
     * 
     * @param data
     *            Point
     * @param places
     *            array list of places
     */
    public Node(T data, ArrayList<String> places)
    {
        this.data = data;
        this.places = places;
        this.streets = new ArrayList<String>();
        distance = 0;
    }

    /**
     * Gets the Point data.
     * Big-O: O(1)
     * @return the string representation of the point
     */
    public T getData() 
    {
        return data;
    }

    /**
     * Sets the Point data to the specified point.
     * Big-O: O(1)
     * @param data
     *            the specified point
     */
    public void setData(T data)
    {
        this.data = data;
    }

    /**
     * Gets the Array list of places.
     * Big-O: O(1)
     * @return the string representation of the list of places
     */
    public ArrayList<String> getPlaces()
    {
        return places;
    }

    /**
     * Sets the array list of places to the specified linked list.
     * Big-O: O(1)
     * @param places
     *            the specified linked list of places
     */
    public void setPlaces(ArrayList<String> places)
    {
        this.places = places;
    }
    

    /**
     * Get the street this node is on
     * @return the streets
     * big-O: O(1)
     */
    public ArrayList<String> getStreets() {
        return streets;
    }

    /**
     * Sets the array list of adjacent streets to the specified linked list
     * @param streets the streets to set
     * big-O: O(1)
     */
    public void setStreets(ArrayList<String> streets) {
        this.streets = streets;
    }
    
    /**
     * Gets the distance of the Node
     * @return distance of the node
     * big-O: O(1)
     */
    public double getDistance()
    {
        return distance;
    }
    
    /**
     * Sets the distance of the Node
     * @param distance of the node
     * big-O: O(1)
     */
    public void setDistance(double distance)
    {
        this.distance = distance;
    }

    /**
     * Adds place to end of the array list of places.
     * Big-O: O(1)
     * 
     * @param place
     *            the specified place
     */
    public void addPlace(String place)
    {
        places.add(place);
    }
    
    /**
     * Strings the point and list of places together.
     * Big-O: O(n)
     * 
     * @return string representation of the node as (x,y): [list of places]
     */
    public String toString()
    {
        return data.toString() + ": "
                + Arrays.toString(places.toArray());
    }

    /**
     * This method should compare the distances of Node objects
     * @param o
     * @return int value representing distance
     * big-O: O(1)
     */
    public int compareTo(Node<T> o) {
        if (o != null)
        {
            if (this.distance < o.distance)
            {
                return -1;
            }
            if (this.distance > o.distance)
            {
                return 1;
            }
            if (this.distance == o.distance)
            {
                return 0;
            }
        }
        return 0;
    }
    
    
}
