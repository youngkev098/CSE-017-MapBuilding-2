/**
 * @author Dawon Jeong 0%
 * @author Jacy Yang 100%
 * @author Kevin Williams 0%
 * @version 5/2/2018
 */
public class MinHeap {

    private Comparable[] Heap; // Pointer to the heap array
    private int size; // Maximum size of the heap
    private int n; // Number of things now in heap

    // Constructor supporting preloading of heap contents
    /**
     * 
     * Constructor
     * 
     * @param h
     *            is the heap name
     * @param num
     *            is the number
     * @param max
     *            is the max size
     * 
     * O(1)
     */
    public MinHeap(Comparable[] h, int num, int max) {
        Heap = h;
        n = num;
        size = max;

        buildheap();

    }

    /**
     * @return current size of heap
     * 
     * O(1)
     */
    public int heapsize() {
        return n;
    }

    /**
     * @param pos
     *            is the position
     * @return true if pos a leaf position, false otherwise
     * 
     * O(1)
     */
    public boolean isLeaf(int pos) {
        return (pos >= n / 2) && (pos < n);
    }

    /**
     *
     * @param pos
     *            is the position
     * @return position for the left child
     *
     * O(1)
     */
    public int leftchild(int pos) {
        if (pos >= n / 2)
            return -1;
        return 2 * pos + 1;
    }

    /**
     * @param pos
     *            is the position
     * @return position for the right child of pos
     *
     * O(1)
     */
    public int rightchild(int pos) {
        if (pos >= (n - 1) / 2)
            return -1;
        return 2 * pos + 2;
    }

    /**
     * @param pos
     *            is the position
     * @return the position for parent
     *
     * O(1)
     */
    public int parent(int pos) {
        if (pos <= 0)
            return -1;
        return (pos - 1) / 2;
    }

    /**
     * insert value into heap
     * 
     * @param key
     *            is the key
     *
     * O(log2n)
     */
    public void insert(Comparable key) {
        if (n >= size) {
            System.out.println("Heap is full");
            return;
        }
        int curr = n++;
        Heap[curr] = key; // Start at end of heap
        // Now sift up until curr's parent's key > curr's key
        while ((curr != 0) && (Heap[curr].compareTo(Heap[parent(curr)]) < 0)) {
            swap(Heap, curr, parent(curr));
            curr = parent(curr);
        }
    }

    /**
     * builds the heap
     *
     * O(n)
     */
    public void buildheap() {
        for (int i = n / 2 - 1; i >= 0; i--) {
            siftdown(i);
        }
    }

    /**
     * puts the element in its correct place
     * 
     * @param pos
     *            is the position
     * 
     * O(log2n)
     */
    public void siftdown(int pos) {
        if ((pos < 0) || (pos >= n))
            return; // Illegal position
        while (!isLeaf(pos)) {
            int j = leftchild(pos);

            if ((j < (n - 1)) && (Heap[j].compareTo(Heap[j + 1]) > 0))
                j++; // j is now index of child with greater value
            if (Heap[pos].compareTo(Heap[j]) <= 0)
                return;

            swap(Heap, pos, j);
            pos = j; // Move down
        }
    }

    /**
     * 
     * @return return minimum value
     *
     * O(log2n)
     */
    public Comparable removemin() {
        if (n == 0)
            return -1; // Removing from empty heap
        swap(Heap, 0, --n); // Swap maximum with last value
        if (n != 0) // Not on last element
            siftdown(0); // Put new heap root val in correct place
        return Heap[n];
    }

    /**
     * 
     * @param pos
     *            is the position
     * @return the element at specified position
     *
     * O(log2n)
     */
    public Comparable remove(int pos) {
        if ((pos < 0) || (pos >= n))
            return -1; // Illegal heap position
        if (pos == (n - 1))
            n--; // Last element, no work to be done
        else {
            swap(Heap, pos, --n); // Swap with last value
            // If we just swapped in a big value, push it up
            while ((pos > 0) && (Heap[pos].compareTo(Heap[parent(pos)]) < 0)) {
                swap(Heap, pos, parent(pos));
                pos = parent(pos);
            }
            if (n != 0)
                siftdown(pos); // If it is little, push down
        }
        return Heap[n];
    }

    /**
     * Swaps
     * 
     * @param arr
     *            is the array
     * @param i
     *            is a variable holder
     * @param j
     *            is a variable holder
     *
     * O(n)
     */
    private void swap(Object[] arr, int i, int j) {
        Object o = arr[i];
        arr[i] = arr[j];
        arr[j] = o;
    }
}
