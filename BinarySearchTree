// -------------------------------------------------------------------------
/**
 * Implements an unbalanced binary search tree. Note that all "matching" is
 * based on the compareTo() method.
 *
 * @param <T>
 *            The type of data element contained in the node.
 * @author Mark Allen Weiss (with modifications by John Lewis)
 * @author Jacy, Aileen and Kevin
 * @version 4/23/18
 */
public class BinarySearchTree<T extends Comparable<? super T>> {
    // ~ Instance/static variables .............................................

    private StreetNodes root;

    // ~ Constructor ...........................................................

    // ----------------------------------------------------------
    /**
     * Constructs an empty tree.
     */
    public BinarySearchTree() {
        root = null;
    }

    // ~ Public methods ........................................................

    // ----------------------------------------------------------
    /**
     * insert method
     *
     * @param x
     *            inserted item
     * @throws DuplicateItemException
     *             if x is present
     */
    public void insert(T x) {
        root = insert(x, root);
    }

    // ----------------------------------------------------------
    /**
     * remove method
     *
     * @param x
     *            removed item
     * @throws ItemNotFoundException
     *             if no x
     */
    public void remove(T x) {
        remove(x, root);
    }

    // ----------------------------------------------------------
    /**
     * find min value method
     *
     * @return smallest item or null
     */
    public T findMin() {
        return elementAt(findMin(root));
    }

    // ----------------------------------------------------------
    /**
     * find max value method
     *
     * @return biggest item or null
     */
    public T findMax() {
        return elementAt(findMax(root));
    }

    // ----------------------------------------------------------
    /**
     * Find an item in the tree.
     *
     * @param x
     *            item to search for
     * @return matching item or null
     */
    public T find(T x) {
        return elementAt(find(x, root));
    }

    // ----------------------------------------------------------
    /**
     * empty method
     */
    public void makeEmpty() {
        root = null;
    }

    // ----------------------------------------------------------
    /**
     * see if tree is empty
     *
     * @return true if empty, false if not
     */
    public boolean isEmpty() {
        return root == null;
    }

    // ----------------------------------------------------------
    /**
     * Internal method to get element value stored in a tree node, with safe
     * handling of null nodes.
     *
     * @param node
     *            node
     * @return data field or null
     */
    private T elementAt(StreetNodes node) {
        return (node == null) ? null : node.getData();
    }

    // ----------------------------------------------------------
    /**
     * Internal method to insert a value into a subtree.
     *
     * @param x
     *             inserted item
     * @param node
     *            node that roots subtree
     * @return new root of the subtree
     * @throws DuplicateItemException
     *             if x is already present
     */
    private StreetNodes insert(T x, StreetNodes node) {
        if (node == null) {
            return new StreetNodes(x);
        } 
        else if (x.compareTo(node.getData()) < 0) {
            node.setLeft(insert(x, node.getLeft()));
        } 
        else if (x.compareTo(node.getData()) > 0) {
            node.setRight(insert(x, node.getRight()));
        } 
        else {
            throw new DuplicateItemException(x.toString());
        }
        return node;
    }

    // ----------------------------------------------------------
    /**
     * Internal method to remove a specified item from a subtree.
     *
     * @param x
     *            removed item
     * @param node
     *            node that roots the subtree
     * @return new root of the subtree.
     * @throws ItemNotFoundException
     *             if x is not found
     */
    private StreetNodes remove(T x, StreetNodes node) {
        StreetNodes result = node;

        if (node == null) {
            throw new ItemNotFoundException(x.toString());
        }

        if (x.compareTo(node.getElement()) < 0) {
            node.setLeft(remove(x, node.getLeft()));
        }
        else if (x.compareTo(node.getElement()) > 0) {
            node.setRight(remove(x, node.getRight()));
        }
        else {
            if (node.getLeft() != null && node.getRight() != null) {
                node.setElement(findMin(node.getRight()).getElement());
                node.setRight(remove(node.getElement(), node.getRight()));
            }
            else if (node.getLeft() != null) {
                result = node.getLeft();
            }
            else {
                result = node.getRight();
            }
        }
        return result;
    }

    // ----------------------------------------------------------
    /**
     * Internal method to find the smallest item in a subtree.
     *
     * @param node
     *            node that roots the tree
     * @return node containing the smallest item
     */
    private StreetNodes findMin(StreetNodes node) {
        if (node == null) {
            return node;
        } 
        else if (node.getLeft() == null) {
            return node;
        } 
        else {
            return findMin(node.getLeft());
        }
    }

    // ----------------------------------------------------------
    /**
     * Internal method to find the largest item in a subtree.
     *
     * @param node
     *            node that roots the tree
     * @return node containing the largest item
     */
    private StreetNodes findMax(StreetNodes node) {
        if (node == null) {
            return node;
        } 
        else if (node.getRight() == null) {
            return node;
        } 
        else {
            return findMax(node.getRight());
        }
    }

    // ----------------------------------------------------------
    /**
     * Internal method to find an item in a subtree.
     *
     * @param x
     *            is item to search for
     * @param node
     *            node that roots the tree
     * @return node containing the matched item
     */
    private StreetNodes find(T x, StreetNodes node) {
        if (node == null) {
            return null;
        } 
        else if (x.compareTo(node.getElement()) < 0) {
            return find(x, node.getLeft());
        } 
        else if (x.compareTo(node.getElement()) > 0) {
            return find(x, node.getRight());
        } 
        else {
            return node;
        }
    }
}
