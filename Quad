import java.util.ArrayList;

/**
 * Implementation defines quadtree as a quadtree with 4 quadtrees as children
 * simulating map grid.
 * 
 * 
 */
public class Quad
{
    private Point topLeft;
    private Point botRight;

    private Node<Point> element;

    private Quad topLeftTree;
    private Quad topRightTree;
    private Quad botLeftTree;
    private Quad botRightTree;
    
    // FOR JACY'S SEARCHSTREET METHODS (DELETE COMMENT LATER)
    BinarySearchTree bst = new BinarySearchTree();
    MinHeap heap = new MinHeap(); // Prob wrong... Says constructor MinHeap() is undefined

    /**
     * Create a quadtree. Find boundaries of quadtree.
     * 
     * @param topLeft
     *            top-left point
     * @param botRight
     *            bottom-right point
     */
    public Quad(Point topLeft, Point botRight)
    {
        this.topLeft = topLeft;
        this.botRight = botRight;

        element = null;
        topLeftTree = null;
        topRightTree = null;
        botLeftTree = null;
        botRightTree = null;
    }

    /**
     * Creates a new node object to be inserted into the quadtree.
     * Big-O: O(logn)
     * 
     * @param x
     *            x-coordinate of the point
     * @param y
     *            y-coordinate of the point
     * @param description
     *            of the point
     */
    public void insert(int x, int y, String description)
    {
        Point pt = new Point(x, y);
        ArrayList<String> places = new ArrayList<String>();
        places.add(description);

        Node<Point> newNode = new Node<Point>(pt, places);
        insert(newNode);
    }

    /**
     * Helper method describing quadtree insertion algorithm.
     * Big-O: O(logn)
     * 
     * @param newNode
     *            new node object to be inserted
     */
    public void insert(Node<Point> newNode)
    {
        
        // Base Case 1: null
        if (newNode == null)
        {
            return;
        }
        // Base Case 3: At a quad of unit area
        if (((botRight.getX() - topLeft.getX()) == 1)
                && ((botRight.getY() - topLeft.getY()) == 1))
        {
            // if node field of quad is null set it to newNode
            if (element == null)
            {
                element = newNode;
                return;
            }
            // else add newNode description to the list of places
            else
            {
                element.addPlace(newNode.getPlaces().get(0));
                return;
            }
        }

        // recursive insert call 1 --------------------------------
        if ((newNode.getData().getX() <= (topLeft.getX() + botRight.getX()) / 2)
                && (newNode.getData().getX() >= topLeft.getX())
                && (newNode.getData().getY() <= (topLeft.getY() + botRight.getY()) / 2)
                && (newNode.getData().getY() >= topLeft.getY()))
        {
            if (topLeftTree == null)
            {
                topLeftTree = new Quad(
                        new Point(topLeft.getX(), topLeft.getY()),
                        new Point(
                                (topLeft.getX() + botRight.getX())
                                        / 2,
                                (topLeft.getY() + botRight.getY())
                                        / 2));
                
            }
            topLeftTree.insert(newNode);
        }

        // recursive insert call 2 --------------------------------
        if ((newNode.getData().getX() <= (topLeft.getX() + botRight.getX()) / 2)
                && (newNode.getData().getX() >= topLeft.getX())
                && (newNode.getData().getY() > (topLeft.getY() + botRight.getY()) / 2)
                && (newNode.getData().getY() <= botRight.getY()))
        {
            if (botLeftTree == null)
            {
                botLeftTree = new Quad(
                        new Point(topLeft.getX(),
                                (topLeft.getY() + botRight.getY())
                                        / 2),
                        new Point((topLeft.getX() + botRight.getX())
                                / 2, botRight.getY()));
            }
            botLeftTree.insert(newNode);
        }

        // recursive insert call 3 --------------------------------
        if ((newNode.getData().getX() > (botRight.getX() + topLeft.getX()) / 2)
                && (newNode.getData().getX() <= botRight.getX())
                && (newNode.getData().getY() >= (topLeft.getY()))
                && (newNode.getData().getY() <= (botRight.getY() + topLeft.getY())/2))
        {
            if (topRightTree == null)
            {
                topRightTree = new Quad(
                        new Point((topLeft.getX() + botRight.getX())
                                / 2, topLeft.getY()),
                        new Point(botRight.getX(),
                                (topLeft.getY() + botRight.getY())
                                        / 2));
            }
            topRightTree.insert(newNode);
        }

        // recursive insert call 4 --------------------------------
        if ((newNode.getData().getX() > (botRight.getX() + topLeft.getX()) / 2)
                && (newNode.getData().getX() <= botRight.getX())
                && (newNode.getData().getY() > (botRight.getY() + topLeft.getY()) / 2)
                && (newNode.getData().getY() <= botRight.getY()))
        {
            if (botRightTree == null)
            {
                botRightTree = new Quad(new Point(
                        (topLeft.getX() + botRight.getX()) / 2,
                        (topLeft.getY() + botRight.getY()) / 2),
                        new Point(botRight.getX(), botRight.getY()));
            }
            botRightTree.insert(newNode);
        }
    }

    /**
     * Searches for a point on the map.
     * Big-O: O(n)
     * 
     * @param x
     *            x-coordinate of the point
     * @param y
     *            y-coordinate of the point
     * @return Node found or null if not found
     */
    public Node<Point> search(int x, int y)
    {
        Point p = new Point(x, y);
        return search(p);
    }

    /**
     * Helper method describing quadtree search algorithm.
     * Big-O: O(n)
     * 
     * @param p
     *            point searching for
     * @return Node of point or null if not found
     */
    public Node<Point> search(Point p)
    {
        // base case 1: current quad cannot contain P - outside of the boundaries
        if (element != null)
        {
            return element;
        }

        // Recursive call 1: P in topLeftTree
        if ((p.getX() <= (topLeft.getX() + botRight.getX()) / 2)
                && (p.getX() >= topLeft.getX())
                && (p.getY() <= (topLeft.getY() + botRight.getY()) / 2)
                && (p.getY() >= topLeft.getY()))
        {
            if (topLeftTree == null)
            {
                return null;
            } else
            {
                return topLeftTree.search(p);
            }
        }

        // Recursive call 2: P in botLeftTree
        if ((p.getX() <= (topLeft.getX() + botRight.getX()) / 2)
                && (p.getX() >= topLeft.getX())
                && (p.getY() > (topLeft.getY() + botRight.getY()) / 2)
                && (p.getY() <= botRight.getY()))
        {
            if (botLeftTree == null)
            {
                return null;
            } else
            {                
                return botLeftTree.search(p);
            }
        }

        // Recursive call 3: P in topRightTree
        if ((p.getX() > (botRight.getX() + topLeft.getX()) / 2)
                && (p.getX() <= botRight.getX())
                && (p.getY() >= (topLeft.getY()))
                && (p.getY() <= (botRight.getY() + topLeft.getY())/2))
        {
            if (topRightTree == null)
            {
                return null;
            } else
            {               
                return topRightTree.search(p);
            }
        }

        // Recursive call 4: P in botRightTree
        if ((p.getX() > (botRight.getX() + topLeft.getX()) / 2)
                && (p.getX() <= botRight.getX())
                && (p.getY() > (botRight.getY() + topLeft.getY()) / 2)
                && (p.getY() <= botRight.getY()))
        {
            if (botRightTree == null)
            {
                return null;
            } else
            {                
                return botRightTree.search(p);
            }
        }
        return null;
    }

    /**
     * Takes string representing the type of place/business the user is interested
     * in and returns a list containing all the nodes with such places.
     * Big-O: O(n)
     * 
     * @param type_of_place
     *            place/business user is interested in
     * @return ArrayList of nodes
     */
    public ArrayList<Node<Point>> search(String type_of_place)
    {
        ArrayList<Node<Point>> list = new ArrayList<Node<Point>>();
        
        return search(this, type_of_place, list);
    }

    /**
     * Recursive method for searching with a string
     * Big-O: O(n)
     * @param root
     *            quad searching in
     * @param place
     *            place/business user is interested in
     * @param list
     *            ArrayList of nodes
     * @return ArrayList of nodes
     */
    public ArrayList<Node<Point>> search(Quad root, String place,
            ArrayList<Node<Point>> list)
    {
        if (root == null)
        {
            return list;
        }
        
        if (root.element != null)
        {
            if ((root.element.getPlaces()).contains(place))
            {
                list.add(root.element);
            }
            return list;
        }
        
        search(root.topLeftTree, place, list);
        search(root.topRightTree, place, list);
        search(root.botLeftTree, place, list);
        search(root.botRightTree, place, list);
        return list;
    }
    
     /**
     * This updated insert method inserts the point, the description
     * and the name of the street
     * 
     * Big-O: O(n^2 * log4 n) //double check
     * 
     * @param x
     *            is the x coordinate of the location
     * @param y
     *            is the y coordinate of the location
     * @param description
     *            is the type of business located at the point
     * @param streets
     *            is the name of the street the point is located on
     */
    public void insert(int x, int y, String description, String... streets) {
        if (description == null || streets == null) {
            return;
        }
        ArrayList<String> temp = new ArrayList<String>();
        temp.add(description);
        Node<Point> newNode = new Node<Point>(new Point(x, y), temp);
        // check if point is outside of the bounds of the "map"
        if (!this.ifInside(newNode.getDataPoint())) {                      
            return;
        }
        // if newNode was not previously added to the Quad
        if (!(search(description).contains(search(new Point(x, y))))) {
            insert(newNode);
        }
        for (String s : streets) {
            newNode.streets().add(s);
            StreetNodes sNode = new StreetNodes(s);
            StreetNodes find = streetNodesBST.find(sNode);
            if (find == null) {
                sNode.addPoint(newNode);
                streetNodesBST.insert(sNode);
            } 
            else {
                find.addPoint(newNode);
            }
        }
    }

    /**
     * This method take a street name and returns 
     * all the locations on that street.
     * Big-O: O(log n) 
     * @param streetName is the name of the street 
     * @return all the locations on that street
     */
    public ArrayList<Node<Point>> streetSearch(String streetName) {
        String answer = streetNodesBST.find(new StreetNodes(streetName));
        
        if(answer == null) {
            return null;
        }
        else {
            return answer.locations(); 
        }
    }

    /**
     * 
     * @param streetName
     *            is the name of the street
     * @param type_of_place
     *            is the type of place
     * @return all the type_of_place locations on the street
     */
    // public ArrayList<Node<Point>> streetSearch(String streetName, String type_of_place) {
      // StreetNodes answer = streetNodesBST.find(new StreetNodes(streetName));
       //if (answer == null ) {
           return null;
       //} 
      // ArrayList<Node<Point>> final = new  ArrayList<Node<Point>>();
       //ArrayList<Node<Point>> locations = answer.locations();
       //for(Node<Point> n: locations) {
         //  if (n.descriptions().contains(type_of_place)) {
           //    final.add(n);
          // }
      // }
       //return final;
   // }
    /**

    public ArrayList<Node<Point>> streetSearch(String streetName, String type_of_place) {
        StreetNodes streets = new StreetNodes(streetName);
        
        if (bst.find(streets) == null) {
            return null;
        }
        
        if (bst.find(streets) != null) { // do we have getters/setters for position for type_of_place
            if (type_of_place.getPos() == streets.getPos()) {
                return type_of_place.getPos();
            }
        }
        
        return null;
    }

    /**
     * 
     * returned in order of distance from the origin ascending update the distance
     * field of the nodes and put all the nodes in a MinHeap call removeMin until
     * the heap is empty
     * 
     * @param originX
     *            the x coordinate of origin
     * @param originY
     *            the y coordinate of origin
     * @param streetName
     *            the name of the street
     * @param type_of_place
     *            the type of place
     * @return all the type_of_place locations on the street
     */
    public ArrayList<Node<Point>> streetSearch(int originX, int originY, String streetName, String type_of_place) {
        StreetNodes streets = new StreetNodes(streetName);
        
        if (bst.find(streets) == null) {
            return null;
        }
        
        if (bst.find(streets) != null) {    // basically this is where I get confused ):
            while (type_of_place.getPos() == streets.getPos()) { 
                heap.insert(type_of_place.getPos());
            }
        }
        
        return null;
    }
    /**
        public ArrayList<Node<Point>> streetSearch(int originX, int originY, String streetName, String type_of_place) {
//origin is not on the map 
if(!contains(new Point(originX, originY))) {
            return null;
        }
          ArrayList<Node<Point>> location = streetSearch(streetName, type_of_place);
        if (location == null) {
            return null;
        }
         ArrayList<Node<Point>> newNodes = new ArrayList<Node<Point>>();
      for (Node<Point> n: loc) {
            n.distance(Math.sqrt(Math.pow((originX - n.point().x()), 2) + Math.pow((originY - n.point().y()), 2)));
            newNodes.add(n);
        }
    
       */
}
